name: Elixir
on:
  workflow_dispatch:
  push:
    branches:
      - main
  pull_request:
    branches: ["**"]

env:
  MIX_ENV: test

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-latest

    strategy:
      matrix:
        otp: ['27']
        elixir: ['1.17', '1.18']

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get version numbers
        id: versions
        run: |
          echo "otp=$(cat .tool-versions | grep erlang | awk '{print $2}')" >> $GITHUB_OUTPUT
          echo "elixir=$(cat .tool-versions | grep elixir | awk '{print $2}')" >> $GITHUB_OUTPUT

      - name: Setup Elixir
        id: beam
        uses: erlef/setup-beam@v1.18.2
        with:
          otp-version: ${{matrix.otp}}
          elixir-version: ${{matrix.elixir}}

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            deps
            _build
          key: ${{ runner.os }}-mix-${{ hashFiles('**/mix.lock') }}
          restore-keys: ${{ runner.os }}-mix-

      - name: Install dependencies
        run: mix deps.get

      - name: Hex audit to check for retired packages
        run: mix hex.audit

      - name: Mix audit to check for vulnerable dependencies
        run: mix deps.audit

      - name: Format check
        run: mix format --check-formatted

      - name: Credo check
        run: mix credo --strict --only warning

      - name: Run tests
        run: mix test

      # Dialyzer setup, following the approach from the Dialyxir docs:
      # https://github.com/jeremyjh/dialyxir/blob/master/docs/github_actions.md
      - name: Cache PLT (for Dialyzer)
        id: plt_cache
        uses: actions/cache/restore@v4
        with:
          path: |
            priv/plts
          key: |
            plt-${{ runner.os }}-${{ steps.beam.outputs.otp-version }}-${{ steps.beam.outputs.elixir-version }}-${{ hashFiles('**/mix.lock') }}
          restore-keys: |
            plt-${{ runner.os }}-${{ steps.beam.outputs.otp-version }}-${{ steps.beam.outputs.elixir-version }}-
          
      # Create PLTs if no cache was found
      - name: Create PLTs
        if: steps.plt_cache.outputs.cache-hit != 'true'
        run: MIX_ENV=dev mix dialyzer --plt

      # By default, the GitHub Cache action will only save the cache if
      # all steps in the job succeed, so we separate the cache restore
      # and save steps in case running dialyzer fails.
      - name: Save PLT cache
        id: plt_cache_save
        uses: actions/cache/save@v4
        if: steps.plt_cache.outputs.cache-hit != 'true'
        with:
          key: |
            plt-${{ runner.os }}-${{ steps.beam.outputs.otp-version }}-${{ steps.beam.outputs.elixir-version }}-${{ hashFiles('**/mix.lock') }}
          path: |
            priv/plts
        
      - name: Dialyzer check
        # From the Dialyxir example GitHub Actions workflow:
        #
        # Two formats are included for ease of debugging and it is
        # lightly recommended to use both, see
        # https://github.com/jeremyjh/dialyxir/issues/530 for reasoning
        # - `--format github` is helpful to print warnings in a way that
        #   GitHub understands and can place on the /files page of a PR
        # - `--format dialyxir` allows the raw GitHub actions logs to be
        #   useful because they have the full warning printed
        run: MIX_ENV=dev mix dialyzer --force-check --format github --format dialyxir
